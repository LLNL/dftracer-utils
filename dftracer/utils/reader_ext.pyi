"""Type stubs for reader_ext module."""

from typing import Optional, Union, List, overload, Dict, Any
from typing_extensions import Self, Literal
from .indexer_ext import DFTracerIndexer

class DFTracerBytesIterator:
    """Iterator for reading bytes chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> str: ...

class DFTracerLineBytesIterator:
    """Iterator for reading line bytes chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...

class DFTracerLinesIterator:
    """Iterator for reading lines chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...

class DFTracerJsonLinesIterator:
    """Iterator for reading JSON lines chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...

class DFTracerJsonLinesBytesIterator:
    """Iterator for reading JSON lines bytes chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...

class DFTracerBytesRangeIterator:
    """Range iterator for reading bytes chunks from DFTracer traces."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> str: ...
    
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def current(self) -> int: ...

class DFTracerLineBytesRangeIterator:
    """Range iterator for reading line bytes chunks from DFTracer files."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...
    
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def current(self) -> int: ...

class DFTracerLinesRangeIterator:
    """Range iterator for reading lines chunks from DFTracer files."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...
    
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def current(self) -> int: ...

class DFTracerJsonLinesRangeIterator:
    """Range iterator for reading JSON lines chunks from DFTracer files."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...
    
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def current(self) -> int: ...

class DFTracerJsonLinesBytesRangeIterator:
    """Range iterator for reading JSON lines bytes chunks from DFTracer files."""
    
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...
    
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def current(self) -> int: ...

class DFTracerBytesReader:
    """Reader for DFTracer files in bytes mode."""
    
    @overload
    def __init__(
        self, 
        gzip_path: str, 
        index_path: Optional[str] = None,
        index_checkpoint_size: int = 33_554_432 # 32MB
    ) -> None: ...
    
    @overload
    def __init__(
        self,
        indexer: DFTracerIndexer
    ) -> None: ...
    
    def get_max_bytes(self) -> int: ...
    def get_num_lines(self) -> int: ...
    def iter(self, step: int = 4194304) -> DFTracerBytesIterator: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> str: ...
    def set_default_step(self, step: int) -> None: ...
    def get_default_step(self) -> int: ...
    def read(self, start: int, end: int) -> str: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> bool: ...
    
    @property
    def gzip_path(self) -> str: ...
    @property
    def index_path(self) -> str: ...
    @property
    def is_open(self) -> bool: ...

class DFTracerLineBytesReader:
    """Reader for DFTracer traces in line bytes mode."""
    
    @overload
    def __init__(
        self, 
        gzip_path: str, 
        index_path: Optional[str] = None,
        index_checkpoint_size: int = 33_554_432 # 32MB
    ) -> None: ...
    
    @overload
    def __init__(
        self,
        indexer: DFTracerIndexer
    ) -> None: ...
    
    def get_max_bytes(self) -> int: ...
    def get_num_lines(self) -> int: ...
    def iter(self, step: int = 4194304) -> DFTracerLineBytesIterator: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...
    def set_default_step(self, step: int) -> None: ...
    def get_default_step(self) -> int: ...
    def read(self, start: int, end: int) -> List[str]: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> bool: ...
    
    @property
    def gzip_path(self) -> str: ...
    @property
    def index_path(self) -> str: ...
    @property
    def is_open(self) -> bool: ...

class DFTracerLinesReader:
    """Reader for DFTracer traces in lines mode."""
    
    @overload
    def __init__(
        self, 
        gzip_path: str, 
        index_path: Optional[str] = None,
        index_checkpoint_size: int = 33_554_432 # 32MB
    ) -> None: ...
    
    @overload
    def __init__(
        self,
        indexer: DFTracerIndexer
    ) -> None: ...
    
    def get_max_bytes(self) -> int: ...
    def get_num_lines(self) -> int: ...
    def iter(self, step: int = 1) -> DFTracerLinesIterator: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[str]: ...
    def set_default_step(self, step: int) -> None: ...
    def get_default_step(self) -> int: ...
    def read(self, start: int, end: int) -> List[str]: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> bool: ...
    
    @property
    def gzip_path(self) -> str: ...
    @property
    def index_path(self) -> str: ...
    @property
    def is_open(self) -> bool: ...

class DFTracerJsonLinesReader:
    """Reader for DFTracer traces in JSON lines mode."""
    
    @overload
    def __init__(
        self, 
        gzip_path: str, 
        index_path: Optional[str] = None,
        index_checkpoint_size: int = 33_554_432 # 32MB
    ) -> None: ...
    
    @overload
    def __init__(
        self,
        indexer: DFTracerIndexer
    ) -> None: ...
    
    def get_max_bytes(self) -> int: ...
    def get_num_lines(self) -> int: ...
    def iter(self, step: int = 1) -> DFTracerJsonLinesIterator: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...
    def set_default_step(self, step: int) -> None: ...
    def get_default_step(self) -> int: ...
    def read(self, start: int, end: int) -> List[Dict[str, Any]]: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> bool: ...
    
    @property
    def gzip_path(self) -> str: ...
    @property
    def index_path(self) -> str: ...
    @property
    def is_open(self) -> bool: ...

class DFTracerJsonLinesBytesReader:
    """Reader for DFTracer traces in JSON lines bytes mode."""
    
    @overload
    def __init__(
        self, 
        gzip_path: str, 
        index_path: Optional[str] = None,
        index_checkpoint_size: int = 33_554_432 # 32MB
    ) -> None: ...
    
    @overload
    def __init__(
        self,
        indexer: DFTracerIndexer
    ) -> None: ...
    
    def get_max_bytes(self) -> int: ...
    def get_num_lines(self) -> int: ...
    def iter(self, step: int = 4194304) -> DFTracerJsonLinesBytesIterator: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> List[Dict[str, Any]]: ...
    def set_default_step(self, step: int) -> None: ...
    def get_default_step(self) -> int: ...
    def read(self, start: int, end: int) -> List[Dict[str, Any]]: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> bool: ...
    
    @property
    def gzip_path(self) -> str: ...
    @property
    def index_path(self) -> str: ...
    @property
    def is_open(self) -> bool: ...

# Alias for common use
DFTracerReader = DFTracerLineBytesReader

@overload
def dft_reader_range(
    reader: Union[DFTracerLineBytesReader, DFTracerBytesReader, DFTracerLinesReader, DFTracerJsonLinesReader, DFTracerJsonLinesBytesReader],
    start: int,
    end: int,
    mode: Literal["line_bytes"] = "line_bytes",
    step: int = 4194304
) -> DFTracerLineBytesRangeIterator: ...

@overload
def dft_reader_range(
    reader: Union[DFTracerLineBytesReader, DFTracerBytesReader, DFTracerLinesReader, DFTracerJsonLinesReader, DFTracerJsonLinesBytesReader],
    start: int,
    end: int,
    mode: Literal["bytes"],
    step: int = 4194304
) -> DFTracerBytesRangeIterator: ...

@overload
def dft_reader_range(
    reader: Union[DFTracerLineBytesReader, DFTracerBytesReader, DFTracerLinesReader, DFTracerJsonLinesReader, DFTracerJsonLinesBytesReader],
    start: int,
    end: int,
    mode: Literal["lines"],
    step: int = 1
) -> DFTracerLinesRangeIterator: ...

@overload
def dft_reader_range(
    reader: Union[DFTracerLineBytesReader, DFTracerBytesReader, DFTracerLinesReader, DFTracerJsonLinesReader, DFTracerJsonLinesBytesReader],
    start: int,
    end: int,
    mode: Literal["json_lines"],
    step: int = 1
) -> DFTracerJsonLinesRangeIterator: ...

@overload
def dft_reader_range(
    reader: Union[DFTracerLineBytesReader, DFTracerBytesReader, DFTracerLinesReader, DFTracerJsonLinesReader, DFTracerJsonLinesBytesReader],
    start: int,
    end: int,
    mode: Literal["json_lines_bytes"],
    step: int = 4194304
) -> DFTracerJsonLinesBytesRangeIterator: ...
